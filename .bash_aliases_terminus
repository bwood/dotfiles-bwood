##############
## Terminus ##
##############

# Globals
# if you need to customize consider a symlink to this location
ISTDRUPAL_NEW_SITE=$HOME/bin/istdrupal-new-site.php

_terminus-hostname() {
  SITE=$1
  if [ x$SITE = x ]; then
    echo "terminus-hostname Must pass a site shortname as the first argument, for example: site-name"
    exit 1
  fi

  ENV=$2
  if [ x$ENV = x ]; then
    echo "terminus-hostname: Must pass an environment as the second argument."
    exit 1
  fi

  TYPE=$3
  if [ x$TYPE = x ]; then
    echo "terminus-hostname: Must pass server type as the third argument."
    exit 1
  fi

  ID=$(terminus site info --field=id --site=$SITE)
  HOSTNAME=""
  if [ -n "$ID" ]; then 
    HOSTNAME="$ENV.$ID@$TYPE.$ENV.$ID.drush.in"
  else 
    echo ""
    echo "Site '$SITE' not found."
  fi
}

terminus-sftp() {
  SITE=$1
  if [ x$SITE = x ]; then
    echo "
USAGE:

terminus-sftp site-shortname

Make an sftp connection to a site.

  site-shortname: REQUIRED: If your site is dev-example.pantheon.io
                  this would be "example" 

"
    return
  fi

  _terminus-hostname "$SITE" "dev" "appserver"

  if [ -n "$HOSTNAME" ]; then
    CMD="sftp -o Port=2222 $HOSTNAME"
    echo $CMD
    $CMD
  fi
}

alias tsftp=terminus-sftp

terminus-logs() {
  SITE=$1
  if [ x$SITE = x ]; then
    echo "
USAGE:

terminus-logs site-shortname

Gets the logs for the site 

  site-shortname: REQUIRED: If your site is dev-example.pantheon.io
                  this would be "example" 

"
    return
  fi

  DIR="/tmp"


  SFTP_CMDS="cd logs
  lcd $DIR/$SITE
  mget php*
  get nginx-access.log"

  _terminus-hostname "$SITE" "dev" "appserver"

  if [ -n "$HOSTNAME" ]; then
    # if the log directory exists delete it
    if [ ! -d "$DIR/$SITE" ]; then
      mkdir "$DIR/$SITE"
    fi

    echo ""
    echo "Connecting to $SITE..."
    CMD="sftp -o Port=2222 $HOSTNAME"
    echo "$SFTP_CMDS" | $CMD

    echo ""
    echo "Logs downloaded to $DIR/$SITE."
    echo ""
    cd "$DIR/$SITE"
    ls -l
  fi
}

alias tlogs=terminus-logs

terminus-git-clone() {
  SITE=$1
  if [ x$SITE = x ]; then
    echo "Must pass a site shortname as the first argument, for example: site-name"
    return
  fi

  SITES_DIR=~/Sites/pantheon  
  cd $SITES_DIR
  if [ -d "$SITE" ]; then
    echo "You already cloned $SITE. Doing a git pull..." 
    cd $SITE
    git pull
    return
  fi

  TYPE="codeserver"
  _terminus-hostname $SITE "dev" $TYPE

  if [ -n "$HOSTNAME" ]; then
    CMD="git clone ssh://$TYPE.$HOSTNAME:2222/~/repository.git $SITE --depth=1"
    $CMD
    cd $SITE
  fi
}

alias tgc=terminus-git-clone


terminus-dashboard() {
  SITE=$1
  if [ x$SITE = x ]; then
    echo "Must pass a site shortname as the first argument, for example: site-name"
    return
  fi
  terminus site dashboard --yes --site=$SITE 
}

alias tdash=terminus-dashboard

terminus-site-wake() {
  SITE=$1
  if [ x$SITE = x ]; then
    echo "Must pass a site shortname as the first argument, for example: site-name"
    return
  fi
  terminus site wake --site=$SITE --env=dev
  terminus site wake --site=$SITE --env=test
}

alias tsite-wake=terminus-site-wake
alias tsw=terminus-site-wake

alias tal="terminus auth login $EMAIL_WORK"
#source /Users/bwood/bin/terminus-completion.bash

terminus-cache-clear () {
  terminus cli cache-clear
  terminus auth login $EMAIL_WORK
  terminus sites list |head -3 # warm the terminus cache
}

alias tcc=terminus-cache-clear


terminus-deploy-code() {
  SITE=$1
  if [ x$SITE = x ]; then
    echo "Must pass the site shortname of the site."
    return
  fi

  ENV=$2
  if [ x$ENV = x ]; then
    echo "Must pass the target environment. (If \"live\" code will also be deployed to \"test.\")"
    return
  fi
  
  if [ "$ENV" == "test" ]; then
    ENVS=( test )
  elif  [ "$ENV" == "live" ]; then
    ENVS=( test live )
  else
    echo "The second argument must be \"test\" or \"live\""
    return
  fi

  for TO_ENV in "${ENVS[@]}"; do
    echo ""
    echo "$SITE: Deploying code to $TO_ENV."
    terminus site deploy --site=$SITE --env=$TO_ENV --note="Deployed via bash $FUNCNAME()."
  done
  
}

alias tdcode=terminus-deploy-code

terminus-deploy-content() {
  SITE=$1
  if [ x$SITE = x ]; then
    echo "Must pass the site shortname of the site."
    return
  fi

  ENV=$2
  if [ x$ENV = x ]; then
    echo "Must pass the target environment. (If \"live\" code will also be deployed to \"test.\")"
    return
  fi
  
  if [ "$ENV" == "test" ]; then
    ENVS=( test )
  elif  [ "$ENV" == "live" ]; then
    ENVS=( test live )
  else
    echo "The second argument must be \"test\" or \"live\""
    return
  fi

  for TO_ENV in "${ENVS[@]}"; do
    echo ""
    echo "$SITE: Deploying content to $TO_ENV."
    terminus site clone-content --from-env=dev --to-env=$TO_ENV --site=$SITE --yes
  done

}

alias tdcontent=terminus-deploy-content

new-site() {

  SITE=$1
  if [ x$SITE = x ]; then
    echo "Must pass the site shortname of the site to which you want to clone."
    return
  fi

  STEPS=$2
  if [ x$STEPS != x ]; then
    STEP_OPT=" -S"$STEPS
  fi
  
  # Create the target site
  php $ISTDRUPAL_NEW_SITE --site=$TO_SITE $STEP_OPT

}

clone-content-between-sites() {
  SOURCE=$1
  if [ x$SOURCE = x ]; then
    echo "Must pass the site shortname of the SOURCE site FROM which to which you want to clone."
    return
  fi

 TARGET=$2
  if [ x$TARGET = x ]; then
    echo "Must pass the site shortname of the TARGET site TO which you want to clone."
    return
  fi

 ELEMENTS=$3
  if [ x$ELEMENTS = x ]; then
    echo "Must pass the (comma-separated) elements that you want to clone. (E.g. \"files,database\")"
    return
  fi

  # replace the ',' with a space and evaluate the string with in '()' to create an array.  Yea bash. :-/
  ELEMENTS=(${ELEMENTS//,/ })

  DB_TASKS=0

  for ELEMENT in "${ELEMENTS[@]}"; do
    if [ "$ELEMENT" == "database" ]; then
      DB_TASKS=1
    fi 
    echo "Cloning $ELEMENT $SOURCE --> $TARGET"
    terminus site import-content --site=$TARGET --url=$(terminus site backups get --site=$SOURCE --env=live --element=$ELEMENT --latest) --element=$ELEMENT
  done

  if [ "$DB_TASKS" -eq "1" ]; then 

    # update pathologic
    echo ""
    echo "Updating pathologic paths on $TARGET."
    echo ""
    PATHOLOGIC="http://dev-$TARGET.pantheon.berkeley.edu/
http://test-$TARGET.pantheon.berkeley.edu/
http://live-$TARGET.pantheon.berkeley.edu/
http://dev-$TARGET.pantheonsite.io/
http://test-$TARGET.pantheonsite.io/
http://live-$TARGET.pantheonsite.io/
http://$TARGET.berkeley.edu
http://$TARGET.localhost"
    terminus drush --site=$TARGET --env=dev "vset openberkeley_wysiwyg_override_pathologic_paths '$PATHOLOGIC'"

    # clear caches
    echo ""
    echo "Clearing caches on $TARGET."
    echo ""
    terminus site clear-cache --site=$TARGET --env=dev
  fi

}

terminus-clone-site() {
  # Other users need to customize ISTDRUPAL_NEW_SITE at top of file

  FROM_SITE=$1
  if [ x$FROM_SITE = x ]; then
    echo "Must pass the site shortname of the site from which you want to clone."
    return
  fi

  # Validate the FROM_SITE
  terminus site info --site=$FROM_SITE &>/dev/null
  STATUS=$?
  if [ "$STATUS" -ne "0" ]; then
    echo "$FROM_SITE is not found.  Try running 
  terminus sites info";
    return
  fi

  TO_SITE=$2
  if [ x$TO_SITE = x ]; then
    echo "Must pass the site shortname of the site to which you want to clone."
    return
  fi

  # Create a basic target site
  new-site $TO_SITE "1,2,5"

  # Clone the db and files from the source to the target site
  clone-content-between-sites $FROM_SITE $TO_SITE "database,files"

  ENV=$3
  if [ x$ENV = x ]; then
    terminus-deploy-code $TO_SITE $ENV
    terminus-deploy-content $TO_SITE $ENV
  fi

  echo "Site created:"
  echo "http://dev-$TO_SITE.pantheon.berkeley.edu"
  echo "http://test-$TO_SITE.pantheon.berkeley.edu"
  echo "http://live-$TO_SITE.pantheon.berkeley.edu"

  # Tag the site on the dashbaord.
  if [[ "$TO_SITE" =~ "upgrade-testing" ]];then
    echo ""
    echo "Since this is an upgrade-testing site, we will add the 'Upgrade Testing' tag."
    if [ -z "$ISTDRUPAL_ORG" ]; then
       echo "(To avoind interaction
  export ISTDRUPAL_ORG=''
before running this script.)
"
       echo "Enter the Pantheon Organization for the tag."
       read INPUT
       ISTDRUPAL_ORG=$INPUT
    fi

    terminus site tags add --tag='Upgrade Testing' --site=$TO_SITE --org="'$ISTDRUPAL_ORG'"

    echo "Done."
  fi


}

alias tcsite=terminus-clone-site
