{
  "settingsVersion": "1.63",
  "exclusionRules": [
    {
      "pattern": "https?://mail.google.com/*",
      "passKeys": ""
    }
  ],
  "filterLinkHints": false,
  "waitForEnterForFilteredHints": true,
  "hideHud": false,
  "keyMappings": "#########################################unmapAll # Use Emacs-style bindings only.########################################## Modifier Keys w/ Emacs Terminology:# `<c-*>` = ⌃ Control Key; i.e. `C-*`.# `<a-*>` = ⌥ Meta Key (Alt/Option); i.e. `M-*`.# To clarify, `<a-*>` is `M-*` in the world of Emacs.# `<m-*>` = ⌘ Command Key (prone to conflicts).#   id ⌘ key conflicts in Google Chrome.#   It's good to avoid the ⌘ key altogether.#   ~ See: http://bit.ly/VUvR7i# The ⇧ Shift key is not used explicitly. However,# all of these keyboard shortcuts are caSe-sensitive.# Therefore, `<c-b>` is certainly NOT the same as `<c-B>`.# Meaning, the ⇧ Shift key **is** necessary in some cases.# You will also need the Shift key for things like `<a-}>`.########################################## Similar to Emacs `(next|previous)-line`.map <c-n> scrollDownmap <c-p> scrollUp# Similar to Emacs `(backward|forward)-char`.map <c-b> scrollLeftmap <c-f> scrollRight# Similar to Emacs `(beginning|end)-of-buffer`..# <a-<>map <a-¯> scrollToTop# <a->>map <a-˘> scrollToBottom# Identical to Emacs `scroll-(left|right)`.map <c-x>< scrollToLeftmap <c-x>> scrollToRight# Identical to `scroll-(down|up)-command`.# <a-v>map <a-√> scrollPageUp #scrollFullPageUp is hard to followmap <c-v> scrollPageDown# Identical to Emacs `scroll-(up|down)-line`# No KBD shortcut in Emacs by default, so not using.# Similar to Emacs `(backward|forward)-paragraph`.# <a-{># map <a-”> scrollPageUp# <a-}># map <a-’> scrollPageDown# Identical to Emacs \"get\" in dired.map g reload# Not implemented in Emacs.unmap <a-s> toggleViewSourcemap <a-ß> toggleViewSource# Identical to Emacs `delete-window`.map <c-x>k removeTab# Not implemented in Emacs.# map <c-g><c-u> copyCurrentUrl# map <c-g><c-l> LinkHints.activateModeToCopyLinkUrl# Not implemented in Emacs.map <c-g><c-o> openCopiedUrlInCurrentTabmap <c-g><c-O> openCopiedUrlInNewTab# Not implemented in Emacs.map <c-g>< goUpmap <c-g>/ goToRoot# Not implemented in Emacs.map <c-g>i enterInsertMode# Not implemented in Emacs.map <c-g><c-f> focusInput# Similar to Emacs `find-file`.map <c-x><c-f> LinkHints.activateModemap <c-x><c-F> LinkHints.activateModeToOpenInNewForegroundTab# <a-f>map <c-x><a-ƒ> LinkHints.activateModeWithQueue# <a-F>map <c-x><a-Ï> LinkHints.activateModeToOpenInNewTab# Similar to Emacs `list-directory`.map <c-x><c-d> Vomnibar.activatemap <c-x><c-D> Vomnibar.activateInNewTab# Similar to Emacs `switch-to-buffer`.map <c-x>b Vomnibar.activateTabSelection# Similar to Emacs `list-buffers`.map <c-x><c-b> Vomnibar.activateBookmarksmap <c-x><c-B> Vomnibar.activateBookmarksInNewTab# Not implemented in Emacs.# Similar to Emacs `(previous|next)-buffer`.# However, this uses `<c-g>` instead of `<c-x>`.map <c-g><left> goPreviousmap <c-g><right> goNext# Similar to Emacs `other-frame`.# Also similar to Emacs `other-window`.# The correct mapping is `<c-x>5o`, but not possible.# Vimium doesn't support the `o` argument.# Instead using `<c-x>o` here.map <c-x>o nextFrame# Similar to Emacs `set-mark-command`.# Similar to Emacs `pop-global-mark`.# Can't use `<c-<space>>` it conflicts w/ Chrome.# In Chrome, `<space>` scrolls the current document.# ------------------------------------------------------------------# NOTE: both of these require that you enter a letter# that you want to associate with a Vimium mark.# e.g. `<c-@>` `a` ... and to return: `<c-x><c-@>` `a`.# ------------------------------------------------------------------map <c-@> Marks.activateCreateModemap <c-x><c-@> Marks.activateGotoMode# Similar to Emacs `isearch-forward`.# Similar to Emacs `isearch-repeat-(forward|backward)`.# ------------------------------------------------------------------# NOTE: Vimium doesn't support repeated `<c-s>`.# Instead, use `<c-S>` to move to next result.# ------------------------------------------------------------------# NOTE: `<c-S>` may conflict w/ SnagIt™. If you run this app,# please remap SnagIt™ to resolve this potential conflict.# ------------------------------------------------------------------# NOTE: Vimium requires that you press the `<enter>` key# before shortcuts `<c-S>` and `<c-R>` will actually work.# ------------------------------------------------------------------map <c-s> enterFindModemap <c-s><c-s> performFindmap <c-r> performBackwardsFindmap <c-R> performBackwardsFind# Not implemented in Emacs.# Similar to Emacs `(backward|forward)-char`.# However, this uses capitals w/ the shift key.map <c-B> goBackmap <c-F> goForward# Not implemented in Emacs.# Similar to Emacs `(previous|next)-buffer`.map <c-x><left> previousTabmap <c-x><right> nextTab# Not implemented in Emacs.# Similar to Emacs `(previous|next)-buffer`.map <c-x><up> firstTabmap <c-x><down> lastTab# Similar to Emacs `generate-new-buffer`.# No KBD shortcut in Emacs by default.map <c-g><c-t> createTab# Similar to `clone-indirect-buffer-other-window`.# The correct mapping is `<c-x>4c`, but not possible.# Vimium doesn't support the `c` argument.map <c-x>4 duplicateTab# Not implemented in Emacs.# Similar to Emacs `recover-file`.# No KBD shortcut in Emacs by default.map <c-g><c-r> restoreTab# Similar to `make-frame-command`.# The correct mapping is `<c-x>52`, but not possible.# Vimium doesn't support the `2` argument.map <c-x>5 moveTabToNewWindow# Not implemented in Emacs.# Similar to `set-window-dedicated-p`.# No KBD shortcut in Emacs by default.map <c-g><c-p> togglePinTab# Not implemented in Emacs.# Similar to `buff-move(left|right)`.# See package: <http://bit.ly/Z1ZXYg># Also similar to: `(backward|forward)-word`# However, this uses capitals w/ the shift key.map <a-B> moveTabLeftmap <a-F> moveTabRight# Similar to Emacs help commands.map <c-h> showHelp",
  "linkHintCharacters": "sadfjklewcmpgh",
  "linkHintNumbers": "0123456789",
  "newTabUrl": "about:newtab",
  "nextPatterns": "next,more,newer,>,›,→,»,≫,>>",
  "previousPatterns": "prev,previous,back,older,<,‹,←,«,≪,<<",
  "regexFindMode": false,
  "ignoreKeyboardLayout": false,
  "scrollStepSize": 60,
  "smoothScroll": true,
  "grabBackFocus": false,
  "searchEngines": "# Jiradop: https://jira.berkeley.edu/browse/DRUPALOPS-%s Jira DRUPALOPSob: https://jira.berkeley.edu/browse/OPENUCB-%s Jira OPENUCBwps: https://jira.berkeley.edu/browse/WPSCON-%s Jira WPSCON# Pantheonpd: http://dev-%s.pantheon.berkeley.edu/pt: http://test-%s.pantheon.berkeley.edu/pl: http://live-%s.pantheon.berkeley.edu/# php.net# you have to hyphenate function namesphpf: http://php.net/manual/en/function.%s.phpphps: http://php.net/search.php?q=%sw: https://www.wikipedia.org/w/index.php?title=Special:Search&search=%s Wikipedia# More examples.## (Vimium supports search completion Wikipedia, as# above, and for these.)#g: https://www.google.com/search?q=%s Google# l: https://www.google.com/search?q=%s&btnI I'm feeling lucky...y: https://www.youtube.com/results?search_query=%s Youtubegm: https://www.google.com/maps?q=%s Google maps# b: https://www.bing.com/search?q=%s Bing# d: https://duckduckgo.com/?q=%s DuckDuckGoaz: https://www.amazon.com/s/?field-keywords=%s Amazon# qw: https://www.qwant.com/?q=%s Qwant",
  "searchUrl": "https://www.google.com/search?q=",
  "userDefinedLinkHintCss": "div > .vimiumHintMarker {/* linkhint boxes */background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#FFF785),  color-stop(100%,#FFC542));border: 1px solid #E3BE23;}div > .vimiumHintMarker span {/* linkhint text */color: black;font-weight: bold;font-size: 12px;}div > .vimiumHintMarker > .matchingCharacter {}"
}
