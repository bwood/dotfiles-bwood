is-numeric () {
    re='^[0-9]+$'
    if [[ $1 =~ $re ]] ; then
        echo 1
    else
	echo 0
    fi
}

ldaps () {
  if [ x$LDAP_GUEST_OU_BIND_PW = x ]; then
      echo "Please run:" 
      echo "  source ~/.env"
      exit 1
  fi

  NUMBER1=$(is-numeric $1)

  if [ "$#" -eq 1 ]; then
      if [ $NUMBER1 -eq 1 ]; then
        echo "searching for UID:"
	ldapsearch -Z -x -h ldap.berkeley.edu -p 389 -D uid=webplatform,ou=applications,dc=berkeley,dc=edu -w $LDAP_GUEST_OU_BIND_PW -LLL "(uid=$1)"
      else
        echo "searching for email:"
	ldapsearch -Z -x -h ldap.berkeley.edu -p 389 -D uid=webplatform,ou=applications,dc=berkeley,dc=edu -w $LDAP_GUEST_OU_BIND_PW -LLL "(mail=$1)"

      fi
  elif [ "$#" -eq 2 ]; then
      NUMBER2=$(is-numeric $2)
      if [[ $NUMBER1 -eq 0 && $NUMBER2 -eq 0 ]]; then
      echo "searching for first and lastname:"
	ldapsearch -Z -x -h ldap.berkeley.edu -p 389 -D uid=webplatform,ou=applications,dc=berkeley,dc=edu -w $LDAP_GUEST_OU_BIND_PW -LLL "(&(givenname=$1)(sn=$2))"
      fi
  fi
}



alias fix-cas-cert='drush vset cas_cert /usr/local/share/certs/cacert.pem'

find-symlinks () {
  ls -lR $1 | grep ^l
}

dig-ucb-ns () {
  IFS=',' read -r -a NAMES <<< "$1"
  # These are the "recursive" name s
  NAMESERVERS=( 128.32.206.9 128.32.206.12 128.32.136.9 128.32.136.12 )  

  for NAME in "${NAMES[@]}"; do
    for NS in "${NAMESERVERS[@]}"; do
        echo ""
        echo "Querying nameserver $NS:"
        dig @$NS $NAME +short
    done
  done
  echo ""
}

showcert() {
  HOST=$1
  curl -vvI https://$HOST 2>&1 |grep "Server certificate"
}

new-site() {

  SITE=$1
  if [ x$SITE = x ]; then
    echo "new-site Must pass a site shortname as the first argument, for example: site-name"
    exit 1
  fi

  PROD_ORG=$2
  if [ x$PROD_ORG = x ]; then
    TEST_ORG='-T'
  else
    TEST_ORG=""
  fi

  php ~/bin/istdrupal-new-site.php --site=$SITE --site-friendly=$SITE --site-mail=bwood+01@berkeley.edu --user1-mail=bwood+02@berkeley.edu -y $TEST_ORG

}

# useful on the machine that runs updates
upgrades-done () {
  cd $HOME/logs
  grep -l "SCRIPT END TIME:" *.log | sed -e 's/_.*/.pantheon.berkeley.edu/g' -e 's/^/http://test-/g'
}

###########
## Drush ##
###########

#Installing sites
drush-site-install() {
  MYALIAS=$1
  if [ x$MYALIAS = x ]; then
    echo "Must pass a drush alias as the first argument, for example: @mytest.dev"
    return
  fi

  if [[ $MYALIAS =~ @pantheon ]];then 
     echo "*** Pantheon ***"
     echo $MYALIAS
     echo "Are you sure about this?"
  fi 
   
  # default profile is openberkeley, or pass your own
  if [ x$2 = x ]; then
    PROFILE="openberkeley"
  else
    PROFILE=$2
  fi
  
  SITEEMAIL=bwood+01@berkeley.edu
  drush $MYALIAS --notify site-install $PROFILE \
  --site-mail=$SITEEMAIL --site-name="Test Site" \
  --account-mail=$SITEEMAIL --account-name=ucbadmin \
  install_configure_form.update_status_module='array(FALSE,FALSE)' \
  openberkeley_add_admin_form.cas_name=213108,304629,248324,267087
}
# To get pathologic paths working try adding
#install_configure_form.openberkeley_wysiwyg_override_pathologic_paths='this
#that' \


alias dsi=drush-site-install

# Adding users/roles
drush-users-roles() {
  MYALIAS=$1
  drush $MYALIAS cas-user-create 300861
  drush $MYALIAS cas-user-create 300862
  drush $MYALIAS cas-user-create 300863
  drush $MYALIAS urol contributor --name=300861
  drush $MYALIAS urol editor --name=300862
  drush $MYALIAS urol builder --name=300863
}
alias dur=drush-users-roles

# Adding users/roles without cas
drush-users-roles-nocas() {
  MYALIAS=$1
  drush $MYALIAS ucrt builder --mail=bwood+10@berkeley.edu --password=t
  drush $MYALIAS ucrt editor --mail=bwood+20@berkeley.edu --password=t
  drush $MYALIAS ucrt contributor --mail=bwood+30@berkeley.edu --password=t
  drush $MYALIAS urol contributor --mail=bwood+30@berkeley.edu
  drush $MYALIAS urol editor --mail=bwood+20@berkeley.edu
  drush $MYALIAS urol builder --mail=bwood+10@berkeley.edu
}
alias dur-nocas=drush-users-roles-nocas

# Toggle pantheon aliases to use drush7 on the remote
drush-script-switch () {

  if [ ! -e ~/.drush/pantheon.aliases.drushrc.php ]; then
    echo "~/.drush/pantheon.aliases.drushrc.php doesn't exist."
    return
  fi

  if [ ! -s ~/.drush/pantheon.aliases.drushrc.php ]; then
    echo "~/drush/pantheon.aliases.drushrc.php is empty."
    return
  fi

  if [ "$1" = "show" ]; then
    grep -m1 '%drush-script' ~/.drush/pantheon.aliases.drushrc.php
    return
  elif [ -n "$1" ] && [ "$1" -eq "7" ]; then 
    TO="drush7"
  else 
    TO="drush"
  fi 
  sed -i -e "s/'%drush-script'.*$/'%drush-script' => '$TO',/g" ~/.drush/pantheon.aliases.drushrc.php 
  grep -m1 '%drush-script' ~/.drush/pantheon.aliases.drushrc.php
}

alias dss=drush-script-switch

drush-self-alias () {
  ALIAS_FILE=~/.drush/aliases.drushrc.php
  SELF_ALIAS=$1
  if [ x$SELF_ALIAS = x ]; then
    echo "First argument should be the name of the alias."
    echo "cd into the \$DRUPAL_ROOT of the site, then run"
    echo "  dsa mysite"
    echo "This will append an alias to $ALIAS_FILE."
    return
  fi

  if [ $(grep -c "\$aliases\[['\"]$SELF_ALIAS['\"]\]" ~/.drush/aliases.drushrc.php) -gt 0 ]; then
    echo "You already have an alias called $SELF_ALIAS"  
    return
  fi

  # it'd be nice not to repeat the command
  #SELF_ALIAS_CMD=drush sa @self --alias-name=$SELF_ALIAS --full --with-db 2>&1
  #SELF_ALIAS_OUT=$($SELF_ALIAS_CMD)

  SELF_ALIAS_OUT=$(drush sa @self --alias-name=$SELF_ALIAS --full --with-db 2>&1)

  if [[ "$SELF_ALIAS_OUT" =~ "Not found: @self" ]]; then
    echo "You need to cd into the \$DRUPAL_ROOT of the site for which you are creating an alias."
    return
  fi
  
  # if you 'echo $SELF_ALIAS_OUT >> ...' you lcdose the nice formatting
  drush sa @self --alias-name=$SELF_ALIAS --full --with-db >> $ALIAS_FILE
  echo "Added alias: "
  tail -21 $ALIAS_FILE
  drush cc drush
}

alias dsa=drush-self-alias

